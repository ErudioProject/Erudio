// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo +nightly run --bin prisma_cli --"
  output   = "../../../libs/backend/prisma-client/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrammaticalForm {
  Masculinine
  Feminine
  Indeterminate
}

enum SchoolRelationType {
  Student
  Teacher
  Admin
}

model Session {
  userId     String
  sessionId  Bytes    @unique
  validUntil DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([validUntil])
}

model User {
  id              String          @id @default(uuid())
  passwordHash    Bytes
  twoFactorAuth   Boolean
  grammaticalForm GrammaticalForm

  piiData            PiiData?
  Session            Session[]
  UserSchoolRelation UserSchoolRelation[]
  UserClasses        Class[]              @relation("UserClass")
  UserPrimaryClasses Class[]              @relation("UserClassPrimary")
}

model PiiData {
  id          String    @id @default(uuid())
  userId      String    @unique
  email       String?   @unique
  pesel       String?
  birthDate   DateTime?
  legalName   String?
  displayName String?
  phonePrefix String?
  phoneNumber String?   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSchoolRelation {
  userId             String
  schoolId           String
  schoolRelationType SchoolRelationType

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  @@id([userId, schoolId])
  @@index([userId])
}

model School {
  id   String @id @default(uuid())
  name String

  SchoolSettings     SchoolSettings?
  Classes            Class[]
  UserSchoolRelation UserSchoolRelation[]
  Subject            Subject?
}

model SchoolSettings {
  id       String @id @default(uuid())
  schoolId String @unique

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Class {
  id       String @id @default(uuid())
  name     String
  schoolId String @unique

  school       School   @relation(fields: [schoolId], references: [id])
  Users        User[]   @relation("UserClass")
  PrimaryUsers User[]   @relation("UserClassPrimary")
  Lesson       Lesson[] @relation("LessonClasss")
}

model Lesson {
  id       String   @id @default(uuid())
  topic    String
  presense Json
  starts   DateTime
  ends     DateTime

  class Class[] @relation("LessonClasss")

  @@index([starts, ends])
}

model Subject {
  id       String @id @default(uuid())
  name     String
  schoolId String @unique

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}
