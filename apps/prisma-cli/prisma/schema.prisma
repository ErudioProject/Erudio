// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo +nightly run --bin prisma_cli --"
  output   = "../../../libs/backend/prisma-client/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrammaticalForm {
  Masculinine
  Feminine
  Indeterminate
}

enum SchoolRelationType {
  Student
  Teacher
  Admin
  Director
}

enum MarkType {
  Mark
  Points
  Custom
}

model UserSchoolRelation {
  UserId             String             @db.Uuid
  SchoolId           String             @db.Uuid
  SchoolRelationType SchoolRelationType

  User   User   @relation(fields: [UserId], references: [Id])
  School School @relation(fields: [SchoolId], references: [Id])

  @@id([UserId, SchoolId])
  @@index([UserId])
}

model SubjectClassTeacherRelation {
  SubjectId String @db.Uuid
  ClassId   String @db.Uuid
  TeacherId String @db.Uuid

  Subject Subject @relation(fields: [SubjectId], references: [Id])
  Class   Class   @relation(fields: [ClassId], references: [Id])
  Teacher User    @relation(fields: [TeacherId], references: [Id])

  @@id([SubjectId, ClassId, TeacherId])
  @@index([ClassId])
}

model TeacherSubjectManager {
  UserId    String @db.Uuid
  SubjectId String @db.Uuid
  Permisson String @db.VarBit

  User    User    @relation(fields: [UserId], references: [Id])
  Subject Subject @relation(fields: [SubjectId], references: [Id])

  @@id([UserId, SubjectId])
  @@index([UserId])
}

model Session {
  UserId     String   @db.Uuid
  SessionId  Bytes    @unique
  ValidUntil DateTime

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@index([UserId])
  @@index([ValidUntil])
}

model User {
  Id            String  @id @default(uuid()) @db.Uuid
  PasswordHash  Bytes
  TwoFactorAuth Boolean

  PiiData                     PiiData?
  Session                     Session[]
  UserSchoolRelation          UserSchoolRelation[]
  UserClasses                 Class[]                       @relation("UserClass")
  UserPrimaryClasses          Class[]                       @relation("UserClassPrimary")
  MarkGotten                  Mark[]                        @relation("StudentMark")
  MarkGiven                   Mark[]                        @relation("TeacherMark")
  TeachedLesson               Lesson[]                      @relation("LessonTeacher")
  HomeroomTeached             Class[]                       @relation("ClassHomeroormTeacher")
  TeacherSubjectManager       TeacherSubjectManager[]
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model PiiData {
  Id              String          @id @default(uuid()) @db.Uuid
  UserId          String          @unique @db.Uuid
  GrammaticalForm GrammaticalForm
  Email           String?         @unique
  Pesel           String?
  BirthDate       DateTime?
  LegalName       String?
  DisplayName     String?
  PhonePrefix     String?
  PhoneNumber     String?         @unique

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)
}

model School {
  Id   String @id @default(uuid()) @db.Uuid
  Name String

  SchoolSettings     SchoolSettings?
  Classes            Class[]
  UserSchoolRelation UserSchoolRelation[]
  Subject            Subject[]
  MarkCategories     LessonEventCategory[]
}

model SchoolSettings {
  Id       String @id @default(uuid()) @db.Uuid
  SchoolId String @unique @db.Uuid

  School School @relation(fields: [SchoolId], references: [Id], onDelete: Cascade)
}

model Class {
  Id                String @id @default(uuid()) @db.Uuid
  Name              String
  SchoolId          String @db.Uuid
  HomeRoomTeacherId String @db.Uuid

  school                      School                        @relation(fields: [SchoolId], references: [Id])
  Users                       User[]                        @relation("UserClass")
  PrimaryUsers                User[]                        @relation("UserClassPrimary")
  Lesson                      Lesson[]                      @relation("LessonClass")
  HomeroomTeachers            User[]                        @relation("ClassHomeroormTeacher")
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model Lesson {
  Id         String   @id @default(uuid()) @db.Uuid
  Topic      String
  Attendance Json
  Starts     DateTime
  Ends       DateTime
  SubjectId  String   @db.Uuid
  Canceled   Boolean

  Class       Class[]       @relation("LessonClass")
  Subject     Subject       @relation(fields: [SubjectId], references: [Id])
  LessonEvent LessonEvent[]
  Teachers    User[]        @relation("LessonTeacher")

  @@index([Starts, Ends])
}

model Subject {
  Id       String @id @default(uuid()) @db.Uuid
  Name     String
  SchoolId String @db.Uuid

  School                      School                        @relation(fields: [SchoolId], references: [Id])
  Lesson                      Lesson[]
  LessonEvent                 LessonEvent[]
  Mark                        Mark[]
  TeacherSubjectManager       TeacherSubjectManager[]
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model LessonEvent {
  Id              String  @id @default(uuid()) @db.Uuid
  LessonId        String? @db.Uuid
  SubjectId       String  @db.Uuid // easly and efficently load all mark for a given subject
  CategoryId      String  @db.Uuid
  AssociatedMarks Boolean // Weather to show column
  Name            String
  Weight          Int // Non optional just se to 0 for irrelevent
  Base            Int
  Canceled        Boolean

  Lesson   Lesson?             @relation(fields: [LessonId], references: [Id])
  Subject  Subject             @relation(fields: [SubjectId], references: [Id])
  Category LessonEventCategory @relation(fields: [CategoryId], references: [Id])
  Mark     Mark[]
}

model Mark {
  Id            String @id @default(uuid()) @db.Uuid
  StudentId     String @db.Uuid
  LessonEventId String @db.Uuid
  SubjectId     String @db.Uuid
  TeacherId     String @db.Uuid
  Description   String
  Value         Int

  Student     User         @relation("StudentMark", fields: [StudentId], references: [Id])
  LessonEvent LessonEvent? @relation(fields: [LessonEventId], references: [Id])
  Subject     Subject?     @relation(fields: [SubjectId], references: [Id])
  Teacher     User         @relation("TeacherMark", fields: [TeacherId], references: [Id])
}

model LessonEventCategory {
  Id             String  @id @default(uuid()) @db.Uuid
  SchoolId       String  @db.Uuid
  DefaultWeight  Int // Non optional just se to 0 for irrelevent
  DefaultBase    Int
  Name           String
  ForceWeigtBase Boolean

  School      School        @relation(fields: [SchoolId], references: [Id])
  LessonEvent LessonEvent[]
}
