// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo +nightly run --bin prisma_cli --"
  output   = "../../../libs/backend/prisma-client/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrammaticalForm {
  Masculinine
  Feminine
  Indeterminate
}

enum SchoolRelationType {
  Student
  Teacher
  Admin
}

model Session {
  UserId     String   @db.Uuid
  SessionId  Bytes    @unique
  ValidUntil DateTime

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@index([UserId])
  @@index([ValidUntil])
}

model User {
  Id              String          @id @default(uuid()) @db.Uuid
  PasswordHash    Bytes
  TwoFactorAuth   Boolean
  GrammaticalForm GrammaticalForm

  PiiData            PiiData?
  Session            Session[]
  UserSchoolRelation UserSchoolRelation[]
  UserClasses        Class[]              @relation("UserClass")
  UserPrimaryClasses Class[]              @relation("UserClassPrimary")
  Mark               Mark[]
}

model PiiData {
  Id          String    @id @default(uuid()) @db.Uuid
  UserId      String    @unique @db.Uuid
  //GrammaticalForm GrammaticalForm //TODO idiot check if not follup on enum handling in select
  Email       String?   @unique
  Pesel       String?
  BirthDate   DateTime?
  LegalName   String?
  DisplayName String?
  PhonePrefix String?
  PhoneNumber String?   @unique

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)
}

model UserSchoolRelation {
  UserId             String             @db.Uuid
  SchoolId           String             @db.Uuid
  SchoolRelationType SchoolRelationType

  User   User   @relation(fields: [UserId], references: [Id])
  School School @relation(fields: [SchoolId], references: [Id])

  @@id([UserId, SchoolId])
  @@index([UserId])
}

model School {
  Id   String @id @default(uuid()) @db.Uuid
  Name String

  SchoolSettings     SchoolSettings?
  Classes            Class[]
  UserSchoolRelation UserSchoolRelation[]
  Subject            Subject[]
}

model SchoolSettings {
  Id       String @id @default(uuid()) @db.Uuid
  SchoolId String @unique @db.Uuid

  School School @relation(fields: [SchoolId], references: [Id], onDelete: Cascade)
}

model Class {
  Id       String @id @default(uuid()) @db.Uuid
  Name     String
  SchoolId String @unique @db.Uuid

  school       School   @relation(fields: [SchoolId], references: [Id])
  Users        User[]   @relation("UserClass")
  PrimaryUsers User[]   @relation("UserClassPrimary")
  Lesson       Lesson[] @relation("LessonClasss")
}

model Lesson {
  Id        String   @id @default(uuid()) @db.Uuid
  Topic     String
  Presense  Json
  Starts    DateTime
  Ends      DateTime
  SubjectId String?  @db.Uuid

  Class       Class[]       @relation("LessonClasss")
  Subject     Subject?      @relation(fields: [SubjectId], references: [Id])
  LessonEvent LessonEvent[]

  @@index([Starts, Ends])
}

model Subject {
  Id       String @id @default(uuid()) @db.Uuid
  Name     String
  SchoolId String @db.Uuid

  School      School        @relation(fields: [SchoolId], references: [Id])
  Lesson      Lesson[]
  LessonEvent LessonEvent[]
  Mark        Mark[]
}

model LessonEvent {
  Id              String  @id @default(uuid()) @db.Uuid
  LessonId        String? @db.Uuid
  SubjectId       String  @db.Uuid // easly and efficently load all mark for a given subject
  AssociatedMarks Boolean // Weather to show column

  Lesson  Lesson?  @relation(fields: [LessonId], references: [Id])
  Subject Subject? @relation(fields: [SubjectId], references: [Id])
  Mark    Mark[]
}

model Mark {
  Id            String @id @default(uuid()) @db.Uuid
  UserId        String @db.Uuid
  LessonEventId String @db.Uuid
  SubjectId     String @db.Uuid

  User        User         @relation(fields: [UserId], references: [Id])
  LessonEvent LessonEvent? @relation(fields: [LessonEventId], references: [Id])
  Subject     Subject?     @relation(fields: [SubjectId], references: [Id])
}
