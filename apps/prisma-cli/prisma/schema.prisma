// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo +nightly run --bin prisma_cli --"
  output   = "../../../libs/backend/prisma-client/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrammaticalForm {
  Masculinine
  Feminine
  Indeterminate
}

enum SchoolRelationType {
  Student
  Teacher
  Admin
  Director
}

enum MarkType {
  NoMark
  Mark
  Points
  Custom
}

model Session {
  UserId     String   @db.Uuid
  SessionId  Bytes    @unique
  ValidUntil DateTime

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@index([UserId])
  @@index([ValidUntil])
}

model PiiData {
  Id              String          @id @default(uuid()) @db.Uuid
  UserId          String          @unique @db.Uuid
  GrammaticalForm GrammaticalForm
  Email           String?         @unique
  Pesel           String?
  BirthDate       DateTime?
  LegalName       String?
  DisplayName     String?
  PhonePrefix     String?
  PhoneNumber     String?         @unique

  User User @relation(fields: [UserId], references: [Id], onDelete: Cascade)
}

model User {
  Id            String  @id @default(uuid()) @db.Uuid
  PasswordHash  Bytes
  TwoFactorAuth Boolean

  PiiData                     PiiData?
  Session                     Session[]
  UserSchoolRelation          UserSchoolRelation[]
  UserClasses                 Class[]                       @relation("UserClass")
  MarkGotten                  Mark[]                        @relation("StudentMark")
  MarkGiven                   Mark[]                        @relation("TeacherMark")
  TeachedLesson               Lesson[]                      @relation("LessonTeacher")
  SubbstituteTeachedLesson    Lesson[]                      @relation("SubstituteLessonTeacher")
  AttendedExternalLessons     Lesson[]                      @relation("LessonExternalStudent")
  ClassAdmin                  Class[]                       @relation("ClassAdmin")
  SubjectAdmin                SubjectAdmin[]
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model UserSchoolRelation {
  UserId             String             @db.Uuid
  SchoolId           String             @db.Uuid
  SchoolRelationType SchoolRelationType

  User   User   @relation(fields: [UserId], references: [Id])
  School School @relation(fields: [SchoolId], references: [Id])

  @@id([UserId, SchoolId])
  @@index([UserId])
}

model School {
  Id   String @id @default(uuid()) @db.Uuid
  Name String

  SchoolSettings      SchoolSettings?
  Classes             Class[]
  UserSchoolRelation  UserSchoolRelation[]
  Subject             Subject[]
  MarkEventCategories MarkEventCategory[]
}

model SchoolSettings {
  Id       String @id @default(uuid()) @db.Uuid
  SchoolId String @unique @db.Uuid

  School School @relation(fields: [SchoolId], references: [Id], onDelete: Cascade)
}

model SubjectClassTeacherRelation {
  SubjectId String @db.Uuid
  ClassId   String @db.Uuid
  TeacherId String @db.Uuid

  Subject Subject @relation(fields: [SubjectId], references: [Id])
  Class   Class   @relation(fields: [ClassId], references: [Id])
  Teacher User    @relation(fields: [TeacherId], references: [Id])

  @@id([SubjectId, ClassId, TeacherId])
  @@index([ClassId])
}

model SubjectAdmin {
  UserId    String @db.Uuid
  SubjectId String @db.Uuid
  Permisson String @db.VarBit

  User    User    @relation(fields: [UserId], references: [Id])
  Subject Subject @relation(fields: [SubjectId], references: [Id])
  Class   Class?  @relation(fields: [classId], references: [Id])
  classId String? @db.Uuid

  @@id([UserId, SubjectId])
  @@index([UserId])
}

model Class {
  Id                  String  @id @default(uuid()) @db.Uuid
  Name                String
  SchoolId            String  @db.Uuid
  ClassAdminId        String  @db.Uuid
  ParentClassId       String  @db.Uuid
  AnyExternalStudents Boolean

  ParentClass                 Class?                        @relation("ParentClass", fields: [ParentClassId], references: [Id])
  ChildClass                  Class[]                       @relation("ParentClass")
  school                      School                        @relation(fields: [SchoolId], references: [Id])
  Users                       User[]                        @relation("UserClass")
  Lesson                      Lesson[]                      @relation("LessonClass")
  ClassAdmin                  User[]                        @relation("ClassAdmin")
  SubjectAdmin                SubjectAdmin[]
  MarkEvent                   MarkEvent[]
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model Lesson {
  Id                  String    @id @default(uuid()) @db.Uuid
  Topic               String
  Attendance          Json
  Starts              DateTime
  Ends                DateTime
  Canceled            Boolean
  SubjectId           String    @db.Uuid
  SubstituteSubjectId String?   @db.Uuid
  SubstituteStarts    DateTime?
  SubstituteEnds      DateTime?

  Class              Class[]     @relation("LessonClass")
  Subject            Subject     @relation("LessonSubject", fields: [SubjectId], references: [Id])
  SubstituteSubject  Subject?    @relation("LessonSubstituteSubject", fields: [SubstituteSubjectId], references: [Id])
  MarkEvent          MarkEvent[]
  Teachers           User[]      @relation("LessonTeacher")
  SubstituteTeachers User[]      @relation("SubstituteLessonTeacher")
  ExternalStudents   User[]      @relation("LessonExternalStudent")

  @@index([Starts, Ends])
}

model Subject {
  Id       String @id @default(uuid()) @db.Uuid
  Name     String
  SchoolId String @db.Uuid

  School                      School                        @relation(fields: [SchoolId], references: [Id])
  Lesson                      Lesson[]                      @relation("LessonSubject")
  SubstitudeLesson            Lesson[]                      @relation("LessonSubstituteSubject")
  MarkEvent                   MarkEvent[]
  Mark                        Mark[]
  SubjectAdmin                SubjectAdmin[]
  SubjectClassTeacherRelation SubjectClassTeacherRelation[]
}

model MarkEvent {
  Id                    String   @id @default(uuid()) @db.Uuid
  LessonId              String?  @db.Uuid
  ClassId               String   @db.Uuid
  SubjectId             String   @db.Uuid // easly and efficently load all mark for a given subject
  LessonEventCategoryId String   @db.Uuid
  AssociatedMarks       Boolean // Weather to show column
  Name                  String
  MarkType              MarkType
  ValueTypeValue        Int // Just int
  Canceled              Boolean

  Lesson            Lesson?           @relation(fields: [LessonId], references: [Id])
  Class             Class?            @relation(fields: [ClassId], references: [Id])
  Subject           Subject           @relation(fields: [SubjectId], references: [Id])
  MarkEventCategory MarkEventCategory @relation(fields: [LessonEventCategoryId], references: [Id])
  Mark              Mark[]
}

model Mark {
  Id            String @id @default(uuid()) @db.Uuid
  StudentId     String @db.Uuid
  LessonEventId String @db.Uuid
  SubjectId     String @db.Uuid
  TeacherId     String @db.Uuid
  Description   String
  Value         Int

  Student   User       @relation("StudentMark", fields: [StudentId], references: [Id])
  MarkEvent MarkEvent? @relation(fields: [LessonEventId], references: [Id])
  Subject   Subject?   @relation(fields: [SubjectId], references: [Id])
  Teacher   User       @relation("TeacherMark", fields: [TeacherId], references: [Id])
}

model MarkEventCategory {
  Id                                    String  @id @default(uuid()) @db.Uuid
  SchoolId                              String  @db.Uuid
  AllowedMarkTypesAndTheirDefaultValues Json // {type1:0, type2:0} - allways numeric or not? maybe?
  Name                                  String
  ForceWeigtBase                        Boolean

  School    School      @relation(fields: [SchoolId], references: [Id])
  MarkEvent MarkEvent[]
}
