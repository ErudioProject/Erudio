// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo +nightly run --bin prisma_cli --"
  output   = "../../../../shared-libs/rust/prisma-client/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum grammatical_form {
  masculinine
  feminine
  indeterminate
}

enum school_relation_type {
  student
  teacher
  admin
  director
}

enum mark_type {
  no_mark
  mark
  points
  custom
}

model session {
  user_id     String   @db.Uuid
  session_id  Bytes    @unique
  valid_until DateTime

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([valid_until])
}

model pii_data {
  id               String           @id @default(uuid()) @db.Uuid
  user_id          String           @unique @db.Uuid
  grammatical_form grammatical_form
  email            String?          @unique
  pesel            String?
  birth_date       DateTime?
  legal_name       String?
  display_name     String?
  phone_prefix     String?
  phone_number     String?          @unique
  previous_data    Json[]

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model two_factor_auth_settings {
  id            String @id @default(uuid()) @db.Uuid
  user_id       String @unique @db.Uuid
  previous_data Json[]

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user {
  id                          String  @id @default(uuid()) @db.Uuid
  password_hash               Bytes
  two_factor_auth_settings_id String? @db.Uuid

  pii_data                       pii_data?
  two_factor_auth_settings       two_factor_auth_settings?
  session                        session[]
  user_school_relation           user_school_relation[]
  user_classes                   user_classes_at_school_relation[]
  mark_gotten                    mark[]                                            @relation("student_mark")
  mark_given                     mark[]                                            @relation("teacher_mark")
  teached_lesson                 user_lesson_teached_at_school_relation[]
  attended_external_lessons      user_lesson_external_student_at_school_relation[]
  class_admin                    user_class_admin_at_school_relation[]
  subject_admin                  subject_admin[]
  subject_class_teacher_relation subject_class_teacher_relation[]
}

model school {
  id            String @id @default(uuid()) @db.Uuid
  name          String
  previous_data Json[]

  school_settings                                 school_settings?
  classes                                         school_class[]
  user_school_relation                            user_school_relation[]
  subject                                         subject[]
  mark_event_categories                           mark_event_category[]
  subject_class_teacher_relation                  subject_class_teacher_relation[]
  subject_admin                                   subject_admin[]
  user_classes_at_school_relation                 user_classes_at_school_relation[]
  user_class_admin_at_school_relation             user_class_admin_at_school_relation[]
  user_lesson_teached_at_school_relation          user_lesson_teached_at_school_relation[]
  user_lesson_external_student_at_school_relation user_lesson_external_student_at_school_relation[]
  class_lesson_at_school_relation                 class_lesson_at_school_relation[]
}

model school_settings {
  id            String @default(uuid()) @db.Uuid
  school_id     String @unique @db.Uuid
  previous_data Json[]

  school school @relation(fields: [school_id], references: [id])

  @@id([id, school_id])
}

model subject_admin {
  school_id  String @db.Uuid
  user_id    String @db.Uuid
  subject_id String @db.Uuid
  permisson  String @db.VarBit

  school  school  @relation(fields: [school_id], references: [id])
  user    user    @relation(fields: [user_id], references: [id])
  subject subject @relation(fields: [subject_id, school_id], references: [id, school_id])

  @@id([school_id, user_id, subject_id])
  @@index([user_id])
}

model school_class {
  id                    String  @default(uuid()) @db.Uuid
  school_id             String  @db.Uuid
  name                  String
  class_admin_id        String  @db.Uuid
  parent_class_id       String  @db.Uuid
  any_external_students Boolean
  previous_data         Json[]

  parent_class                   school_class?                         @relation("parent_class", fields: [parent_class_id, school_id], references: [id, school_id])
  child_class                    school_class[]                        @relation("parent_class")
  school                         school                                @relation(fields: [school_id], references: [id])
  students                       user_classes_at_school_relation[]
  lesson                         class_lesson_at_school_relation[]
  class_admin                    user_class_admin_at_school_relation[]
  mark_event                     mark_event[]
  subject_class_teacher_relation subject_class_teacher_relation[]

  @@id([id, school_id])
}

model lesson {
  id            String   @default(uuid()) @db.Uuid
  school_id     String   @db.Uuid
  subject_id    String   @db.Uuid
  topic         String
  attendance    Json
  starts        DateTime
  ends          DateTime
  canceled      Boolean
  previous_data Json[]

  class             class_lesson_at_school_relation[]
  subject           subject                                           @relation("lesson_subject", fields: [subject_id, school_id], references: [id, school_id])
  mark_event        mark_event[]
  teachers          user_lesson_teached_at_school_relation[]
  external_students user_lesson_external_student_at_school_relation[]

  @@id([id, school_id])
  @@index([starts, ends])
}

model subject {
  id            String @default(uuid()) @db.Uuid
  school_id     String @db.Uuid
  name          String
  previous_data Json[]

  school                         school                           @relation(fields: [school_id], references: [id])
  lesson                         lesson[]                         @relation("lesson_subject")
  mark_event                     mark_event[]
  mark                           mark[]
  subject_admin                  subject_admin[]
  subject_class_teacher_relation subject_class_teacher_relation[]

  @@id([id, school_id])
}

model mark_event {
  id                       String    @default(uuid()) @db.Uuid
  school_id                String    @db.Uuid
  lesson_id                String?   @db.Uuid
  class_id                 String    @db.Uuid
  subject_id               String    @db.Uuid // easly and efficently load all mark for a given subject
  lesson_event_category_id String    @db.Uuid
  associated_marks         Boolean // Weather to show column
  name                     String
  mark_type                mark_type
  mark_type_value          Int // Just int
  canceled                 Boolean
  previous_data            Json[]

  lesson              lesson?             @relation(fields: [lesson_id, school_id], references: [id, school_id])
  class               school_class?       @relation(fields: [class_id, school_id], references: [id, school_id])
  subject             subject             @relation(fields: [subject_id, school_id], references: [id, school_id])
  mark_event_category mark_event_category @relation(fields: [lesson_event_category_id, school_id], references: [id, school_id])
  mark                mark[]

  @@id([id, school_id])
}

model mark_event_category {
  id                                          String  @default(uuid()) @db.Uuid
  school_id                                   String  @db.Uuid
  allowed_mark_types_and_their_default_values Json // {type1:0, type2:0} - allways numeric or not? maybe?
  name                                        String
  force_weigt_base                            Boolean
  previous_data                               Json[]

  school     school       @relation(fields: [school_id], references: [id])
  mark_event mark_event[]

  @@id([id, school_id])
}

model mark {
  id              String @default(uuid()) @db.Uuid
  school_id       String @db.Uuid
  student_id      String @db.Uuid
  lesson_event_id String @db.Uuid
  subject_id      String @db.Uuid
  teacher_id      String @db.Uuid
  description     String
  value           Int
  previous_data   Json[]

  student    user        @relation("student_mark", fields: [student_id], references: [id])
  mark_event mark_event? @relation(fields: [lesson_event_id, school_id], references: [id, school_id])
  subject    subject?    @relation(fields: [subject_id, school_id], references: [id, school_id])
  teacher    user        @relation("teacher_mark", fields: [teacher_id], references: [id])

  @@id([id, school_id])
}

// Bellow onnly relation

model user_school_relation {
  user_id              String               @db.Uuid
  school_id            String               @db.Uuid
  school_relation_type school_relation_type

  user   user   @relation(fields: [user_id], references: [id])
  school school @relation(fields: [school_id], references: [id])

  @@id([user_id, school_id])
  @@index([user_id])
}

model user_classes_at_school_relation {
  user_id   String @db.Uuid
  school_id String @db.Uuid
  class_id  String @db.Uuid

  user   user         @relation(fields: [user_id], references: [id])
  school school       @relation(fields: [school_id], references: [id])
  class  school_class @relation(fields: [class_id, school_id], references: [id, school_id])

  @@id([user_id, school_id, class_id])
}

model user_class_admin_at_school_relation {
  user_id   String @db.Uuid
  school_id String @db.Uuid
  class_id  String @db.Uuid

  user   user         @relation(fields: [user_id], references: [id])
  school school       @relation(fields: [school_id], references: [id])
  class  school_class @relation(fields: [class_id, school_id], references: [id, school_id])

  @@id([user_id, school_id, class_id])
}

model user_lesson_teached_at_school_relation {
  user_id   String @db.Uuid
  school_id String @db.Uuid
  lesson_id String @db.Uuid

  user   user   @relation(fields: [user_id], references: [id])
  school school @relation(fields: [school_id], references: [id])
  lesson lesson @relation(fields: [lesson_id, school_id], references: [id, school_id])

  @@id([user_id, school_id, lesson_id])
}

model user_lesson_external_student_at_school_relation {
  user_id   String @db.Uuid
  school_id String @db.Uuid
  lesson_id String @db.Uuid

  user   user   @relation(fields: [user_id], references: [id])
  school school @relation(fields: [school_id], references: [id])
  lesson lesson @relation(fields: [lesson_id, school_id], references: [id, school_id])

  @@id([user_id, school_id, lesson_id])
}

model subject_class_teacher_relation {
  school_id  String @db.Uuid
  subject_id String @db.Uuid
  class_id   String @db.Uuid
  teacher_id String @db.Uuid

  school  school       @relation(fields: [school_id], references: [id])
  subject subject      @relation(fields: [subject_id, school_id], references: [id, school_id])
  class   school_class @relation(fields: [class_id, school_id], references: [id, school_id])
  teacher user         @relation(fields: [teacher_id], references: [id])

  @@id([school_id, subject_id, class_id, teacher_id])
  @@index([class_id])
}

model class_lesson_at_school_relation {
  lesson_id String @db.Uuid
  school_id String @db.Uuid
  class_id  String @db.Uuid

  lesson lesson       @relation(fields: [lesson_id, school_id], references: [id, school_id])
  school school       @relation(fields: [school_id], references: [id])
  class  school_class @relation(fields: [class_id, school_id], references: [id, school_id])

  @@id([lesson_id, school_id, class_id])
}
