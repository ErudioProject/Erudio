name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  frontend-changes:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.changed-frontend.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed frontend files
        id: changed-frontend
        uses: tj-actions/changed-files@v34
        with:
          files: |
            **/*.json
            **/*.js
            **/*.ts
            **/*.jsx
            **/*.tsx
            **/*.html
            **/*.css

  frontend:
    runs-on: ubuntu-latest
    needs: frontend-changes
    if: needs.frontend-changes.outputs.found == 'true'
    strategy:
      matrix:
        environment: [dev]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create .env
        shell: bash
        run: |
          cp -a ./configs/${{ matrix.environment }}/. .

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm -r build

      - name: Test packages
        run: pnpm -r test

  backend-changes:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.changed-rust.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed rust files
        id: changed-rust
        uses: tj-actions/changed-files@v34
        with:
          files: |
            **/*.rs
            **/*.toml

  docker-changes:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.changed-rust.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed rust files
        id: changed-rust
        uses: tj-actions/changed-files@v34
        with:
          files: |
            **/*.yml
            **/Dockerfile

  backend:
    runs-on: ubuntu-latest
    needs: backend-changes
    if: needs.backend-changes.outputs.found == 'true'
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          #- nightly TODO reenable nightly
        environment: [dev] # test, staging, production
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install protoc # open telemetry
        run: sudo apt-get install protobuf-compiler
      - run: cp -a ./configs/${{ matrix.environment }}/. .
      - uses: isbang/compose-action@v1.4.1
        with:
          compose-file: "./apps/erudio/docker-compose.yml"
          services: |
            cocroach-setup
            redis-stack-prod
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} && rustup component add clippy
      - uses: Swatinem/rust-cache@v2
      - name: Generate prisma client
        run: cargo run --bin prisma_cli --release -- generate
        working-directory: ./apps/erudio/backend-prisma-cli
      - run: cargo build --release
      - run: cargo clippy --release -- -D warnings
      - run: cargo test --release

  integration:
    runs-on: ubuntu-latest
    needs:
      - frontend-changes
      - backend-changes
      - docker-changes
    if: needs.frontend-changes.outputs.found == 'true' || needs.backend-changes.outputs.found == 'true' || needs.docker-changes.outputs.found == 'true'
    strategy:
      matrix:
        environment: [dev] # test, staging, production
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: cp -a ./configs/${{ matrix.environment }}/. .
      - run: docker-compose pull
        working-directory: ./apps/erudio
      - uses: isbang/compose-action@v1.4.1
        with:
          compose-file: "./apps/erudio/docker-compose.yml"
          up-flags: "--build"
          services: |
            cocroach-setup
            redis-stack-prod
            api
      - uses: isbang/compose-action@v1.4.1
        with:
          compose-file: "./apps/erudio/docker-compose.yml"
      - run: echo "INTEGRATION TESTS"
